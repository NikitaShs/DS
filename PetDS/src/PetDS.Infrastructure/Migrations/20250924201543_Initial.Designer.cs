// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetDS.Infrastructure.DataBaseConnections;

#nullable disable

namespace PetDS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924201543_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetDS.Domain.Departament.Departament", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.Property<Guid?>("parent_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_departaments");

                    b.HasIndex("parent_Id")
                        .HasDatabaseName("ix_departaments_parent_id");

                    b.ToTable("departaments", (string)null);
                });

            modelBuilder.Entity("PetDS.Domain.Departament.DepartamentLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DepartamentId")
                        .HasColumnType("uuid")
                        .HasColumnName("departament_id");

                    b.Property<Guid>("DepartamentId1")
                        .HasColumnType("uuid")
                        .HasColumnName("departament_id1");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.HasKey("Id")
                        .HasName("pk_departament_locations");

                    b.HasIndex("DepartamentId")
                        .HasDatabaseName("ix_departament_locations_departament_id");

                    b.HasIndex("DepartamentId1")
                        .HasDatabaseName("ix_departament_locations_departament_id1");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_departament_locations_location_id");

                    b.ToTable("departamentLocations", (string)null);
                });

            modelBuilder.Entity("PetDS.Domain.Departament.DepartamentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DepartamentId")
                        .HasColumnType("uuid")
                        .HasColumnName("departament_id");

                    b.Property<Guid>("DepartamentId1")
                        .HasColumnType("uuid")
                        .HasColumnName("departament_id1");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("Id")
                        .HasName("pk_departament_positions");

                    b.HasIndex("DepartamentId")
                        .HasDatabaseName("ix_departament_positions_departament_id");

                    b.HasIndex("DepartamentId1")
                        .HasDatabaseName("ix_departament_positions_departament_id1");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_departament_positions_position_id");

                    b.ToTable("departamentPositions", (string)null);
                });

            modelBuilder.Entity("PetDS.Domain.Location.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("PetDS.Domain.Position.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("PetDS.Domain.Departament.Departament", b =>
                {
                    b.HasOne("PetDS.Domain.Departament.Departament", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("parent_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_departaments_departaments_parent_id");

                    b.OwnsOne("PetDS.Domain.Departament.VO.DepartamentIdentifier", "Identifier", b1 =>
                        {
                            b1.Property<Guid>("DepartamentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ValueIdentifier")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identifier_value_identifier");

                            b1.HasKey("DepartamentId");

                            b1.ToTable("departaments");

                            b1.WithOwner()
                                .HasForeignKey("DepartamentId")
                                .HasConstraintName("fk_departaments_departaments_id");
                        });

                    b.OwnsOne("PetDS.Domain.Departament.VO.DepartamentName", "Name", b1 =>
                        {
                            b1.Property<Guid>("DepartamentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ValueName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_value_name");

                            b1.HasKey("DepartamentId");

                            b1.HasIndex("ValueName")
                                .IsUnique()
                                .HasDatabaseName("ix_departaments_name_value_name");

                            b1.ToTable("departaments");

                            b1.WithOwner()
                                .HasForeignKey("DepartamentId")
                                .HasConstraintName("fk_departaments_departaments_id");
                        });

                    b.OwnsOne("PetDS.Domain.Departament.VO.DepartamentPash", "Path", b1 =>
                        {
                            b1.Property<Guid>("DepartamentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ValuePash")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path_value_pash");

                            b1.HasKey("DepartamentId");

                            b1.ToTable("departaments");

                            b1.WithOwner()
                                .HasForeignKey("DepartamentId")
                                .HasConstraintName("fk_departaments_departaments_id");
                        });

                    b.Navigation("Identifier")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Path")
                        .IsRequired();
                });

            modelBuilder.Entity("PetDS.Domain.Departament.DepartamentLocation", b =>
                {
                    b.HasOne("PetDS.Domain.Departament.Departament", null)
                        .WithMany("DepartamentLocations")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departament_locations_departaments_departament_id");

                    b.HasOne("PetDS.Domain.Departament.Departament", "Departament")
                        .WithMany()
                        .HasForeignKey("DepartamentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departament_locations_departaments_departament_id1");

                    b.HasOne("PetDS.Domain.Location.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departament_locations_locations_location_id");

                    b.Navigation("Departament");
                });

            modelBuilder.Entity("PetDS.Domain.Departament.DepartamentPosition", b =>
                {
                    b.HasOne("PetDS.Domain.Departament.Departament", null)
                        .WithMany("DepartamentPositions")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departament_positions_departaments_departament_id");

                    b.HasOne("PetDS.Domain.Departament.Departament", "Departament")
                        .WithMany()
                        .HasForeignKey("DepartamentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departament_positions_departaments_departament_id1");

                    b.HasOne("PetDS.Domain.Position.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_departament_positions_positions_position_id");

                    b.Navigation("Departament");
                });

            modelBuilder.Entity("PetDS.Domain.Location.Location", b =>
                {
                    b.OwnsOne("PetDS.Domain.Location.VO.LocationAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.ToJson("Address");

                            b1.WithOwner()
                                .HasForeignKey("LocationId")
                                .HasConstraintName("fk_locations_locations_id");
                        });

                    b.OwnsOne("PetDS.Domain.Location.VO.LocationName", "Name", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ValueName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_value_name");

                            b1.HasKey("LocationId");

                            b1.HasIndex("ValueName")
                                .IsUnique()
                                .HasDatabaseName("ix_locations_name_value_name");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId")
                                .HasConstraintName("fk_locations_locations_id");
                        });

                    b.OwnsOne("PetDS.Domain.Location.VO.LocationTimezone", "Timezone", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("LanaCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone_lana_code");

                            b1.HasKey("LocationId");

                            b1.ToTable("locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId")
                                .HasConstraintName("fk_locations_locations_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Timezone")
                        .IsRequired();
                });

            modelBuilder.Entity("PetDS.Domain.Position.Position", b =>
                {
                    b.OwnsOne("PetDS.Domain.Position.VO.PositionDiscription", "Discription", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ValueDiscription")
                                .HasColumnType("text")
                                .HasColumnName("discription_value_discription");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId")
                                .HasConstraintName("fk_positions_positions_id");
                        });

                    b.OwnsOne("PetDS.Domain.Position.VO.PositionName", "Name", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ValueName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name_value_name");

                            b1.HasKey("PositionId");

                            b1.HasIndex("ValueName")
                                .IsUnique()
                                .HasDatabaseName("ix_positions_name_value_name");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId")
                                .HasConstraintName("fk_positions_positions_id");
                        });

                    b.Navigation("Discription");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("PetDS.Domain.Departament.Departament", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartamentLocations");

                    b.Navigation("DepartamentPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
